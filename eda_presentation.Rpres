Exploratory Data Analysis: Olfaction Prediction Data
========================================================
author: 
</br>Vidya Koesmahargyo 
</br>Kit McDonald
</br>Eden Feldman

10/11/18

Data Refresher
========================================================

- Olfaction data
  - Predict valence and intensity given the physical/molecular structure
  - High and low intensity
  - Valence and strength on 0-100 scale
- Molecular descriptors (~4800)
- Compounds (~470)
- Participants (~49)


Data at First Glance
========================================================
```{r libraries, message=FALSE, warning=FALSE, include=FALSE, echo=FALSE}
library(dplyr)
library(tibble)
library(ggplot2)
library(ggfortify)
library(OpenImageR)
library(fastICA)
library(NMF)

```


```{r Load data}

# Molecuar data and labels
molec_desc <- read.delim('molecular_descriptors.txt', stringsAsFactors = FALSE)
labels <- read.delim("training_set.txt", stringsAsFactors = FALSE)

# Examine data
dim(molec_desc)
dim(labels)
```

Data at First Glance Cont...
========================================================

```{r}

str(molec_desc)

```

Data at First Glance Cont(2)...
========================================================

```{r}

str(labels)

```


Data Cleaning (Check for NA Values)
========================================================

```{r Check NA Cols, message=FALSE, warning=FALSE}

# Check for NA values
(any(is.na(molec_desc)))

# Get number of cols with NAs
(sum(sapply(molec_desc, function(x) sum(is.na(x)))))

```

Data Cleaning (Check for NA Values) Cont...
========================================================

```{r Check NA Rows, message=FALSE, warning=FALSE}

# Find sum of NAs by row
na_row_lst <- apply(molec_desc, MARGIN = 1, function(x) sum(is.na(x)))

# Find row with NAs
row_na <- as.vector(which(na_row_lst > 0 %in% molec_desc))

# Show rows in molec_desc with NAs and count
(na_row_table <- cbind("Row Index" = row_na, "Total NAs" = na_row_lst[row_na]))
```

Pre-Process Molecular Descriptor Data
========================================================

```{r}
# Remove rows with NA values
molec_desc <- na.omit(molec_desc)

# Remove columns with no variance
molec_desc <- molec_desc[ ,(apply(molec_desc,2,var)!=0)]
```

Data Cleaning
========================================================

```{r echo=FALSE}
molec_desc
# str(labels)
```

Creating Factors for Valence and Intensity
========================================================

```{r }
# Make factors
labels$VALENCE.PLEASANTNESS <- factor(labels$VALENCE.PLEASANTNESS)
levels(labels$VALENCE.PLEASANTNESS) <- list("Unpleasent" = c(0:33), "Neutral" = c(34:66), "Pleasant" = c(67:100))

labels$INTENSITY.STRENGTH <- factor(labels$INTENSITY.STRENGTH)
levels(labels$INTENSITY.STRENGTH) <- list("Low" = c(0:33), "Medium" = c(34:66), "High" = c(67:100))
```

Using only High intensity data (highest dilution)
=======================================================

```{r }
# Subset
olfaction_data <- subset(labels, Intensity == "high ", select = c("Compound.Identifier", "VALENCE.PLEASANTNESS", "INTENSITY.STRENGTH"))

head(olfaction_data)

```

Merging the Dataframes
========================================================

```{r echo=FALSE}

# Rename Compound Identifier column
colnames(olfaction_data)[1] <- "CID"

# Merge data and labels
total_olfac <- merge(x = molec_desc, y = olfaction_data, by= "CID", all.y = TRUE)

# Examine data
head(total_olfac)
dim(total_olfac)

# 
# joined <- merge(olfaction_data, molec_desc_pca, by.x= "CID", by.y="identifiers")
# dim(joined)
# joined <- joined[, -2]
# head(as.tibble(joined))
# 
# dim(joined)

```


Plotting the Labels (Perceived Intensity)
========================================================
```{r echo=FALSE}
# Intensity
ggplot(total_olfac) + geom_bar(aes(x=INTENSITY.STRENGTH, fill = INTENSITY.STRENGTH)) + ggtitle("Distribution of Perceived Odor Intensity") + xlab("Odor Intensity")

```

Plotting the Labels (Perceived Valence)
========================================================
```{r echo=FALSE}
# Valence
ggplot(total_olfac) + geom_bar(aes(x=VALENCE.PLEASANTNESS, fill = VALENCE.PLEASANTNESS)) + ggtitle("Distribution of Odor Pleasantness") + xlab("Odor Pleasantness")

```

Plotting the Labels (Perceived Intensity of Valence)
========================================================
```{r echo=FALSE}
# Intensity of Valence
ggplot(total_olfac) + geom_bar(aes(x=VALENCE.PLEASANTNESS, fill = INTENSITY.STRENGTH)) + ggtitle("Perceived Intensity of Odor Pleasantness") + xlab("Odor Pleasantness")

```



Principal Component Analysis
========================================================

```{r }
molec_desc_pca <- data.frame(molec_desc) # convert to df
identifiers <- molec_desc_pca[ , 1] # setting the CID column separately
dim(molec_desc_pca)
head(as.tibble(molec_desc_pca))
```

========================================================
PCA Plot

```{r echo=FALSE}
pca <- prcomp(molec_desc_pca, scale. = T) # scaling pca
autoplot(pca, main='PCA plot: Variance of first 2 Principle Components')
```

========================================================
Screeplot

```{r echo=FALSE}
screeplot(pca, 100, main='Screeplot of Olfaction data', type='l')
```

========================================================
Cumulative Screeplot

```{r echo=FALSE}
std_dev <- pca$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(cumsum(prop_varex), type='b', main="Cumulative Sum Screeplot", xlab='Principle Component', ylab='Total Variance Proportion')
```


Next Steps
========================================================



